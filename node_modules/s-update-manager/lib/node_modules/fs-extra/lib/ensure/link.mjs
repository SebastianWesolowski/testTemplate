import '../../../universalify/index.mjs';
import path$1 from 'path';
import '../fs/index.mjs';
import { m as mkdirs } from '../mkdirs/index.mjs';
import { p as pathExists_1 } from '../path-exists/index.mjs';
import { s as stat } from '../util/stat.mjs';
import { __exports as universalify } from '../../../../_virtual/index2.mjs';
import { __exports as fs$1 } from '../../../../_virtual/index.mjs';

const u = universalify.fromPromise;
const path = path$1;
const fs = fs$1;
const mkdir = mkdirs;
const { pathExists } = pathExists_1;
const { areIdentical } = stat;

async function createLink (srcpath, dstpath) {
  let dstStat;
  try {
    dstStat = await fs.lstat(dstpath);
  } catch {
    // ignore error
  }

  let srcStat;
  try {
    srcStat = await fs.lstat(srcpath);
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink');
    throw err
  }

  if (dstStat && areIdentical(srcStat, dstStat)) return

  const dir = path.dirname(dstpath);

  const dirExists = await pathExists(dir);

  if (!dirExists) {
    await mkdir.mkdirs(dir);
  }

  await fs.link(srcpath, dstpath);
}

function createLinkSync (srcpath, dstpath) {
  let dstStat;
  try {
    dstStat = fs.lstatSync(dstpath);
  } catch {}

  try {
    const srcStat = fs.lstatSync(srcpath);
    if (dstStat && areIdentical(srcStat, dstStat)) return
  } catch (err) {
    err.message = err.message.replace('lstat', 'ensureLink');
    throw err
  }

  const dir = path.dirname(dstpath);
  const dirExists = fs.existsSync(dir);
  if (dirExists) return fs.linkSync(srcpath, dstpath)
  mkdir.mkdirsSync(dir);

  return fs.linkSync(srcpath, dstpath)
}

var link = {
  createLink: u(createLink),
  createLinkSync
};

export { link as l };
