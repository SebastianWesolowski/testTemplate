import '../../../universalify/index.mjs';
import '../fs/index.mjs';
import path$1 from 'path';
import { m as mkdirs } from '../mkdirs/index.mjs';
import { r as remove_1 } from '../remove/index.mjs';
import { __exports as universalify } from '../../../../_virtual/index2.mjs';
import { __exports as fs$1 } from '../../../../_virtual/index.mjs';

const u = universalify.fromPromise;
const fs = fs$1;
const path = path$1;
const mkdir = mkdirs;
const remove = remove_1;

const emptyDir = u(async function emptyDir (dir) {
  let items;
  try {
    items = await fs.readdir(dir);
  } catch {
    return mkdir.mkdirs(dir)
  }

  return Promise.all(items.map(item => remove.remove(path.join(dir, item))))
});

function emptyDirSync (dir) {
  let items;
  try {
    items = fs.readdirSync(dir);
  } catch {
    return mkdir.mkdirsSync(dir)
  }

  items.forEach(item => {
    item = path.join(dir, item);
    remove.removeSync(item);
  });
}

var empty = {
  emptyDirSync,
  emptydirSync: emptyDirSync,
  emptyDir,
  emptydir: emptyDir
};

export { empty as e };
