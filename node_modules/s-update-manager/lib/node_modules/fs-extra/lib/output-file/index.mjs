import '../../../universalify/index.mjs';
import '../fs/index.mjs';
import path$1 from 'path';
import { m as mkdirs } from '../mkdirs/index.mjs';
import { p as pathExists_1 } from '../path-exists/index.mjs';
import { __exports as universalify } from '../../../../_virtual/index2.mjs';
import { __exports as fs$1 } from '../../../../_virtual/index.mjs';

const u = universalify.fromPromise;
const fs = fs$1;
const path = path$1;
const mkdir = mkdirs;
const pathExists = pathExists_1.pathExists;

async function outputFile (file, data, encoding = 'utf-8') {
  const dir = path.dirname(file);

  if (!(await pathExists(dir))) {
    await mkdir.mkdirs(dir);
  }

  return fs.writeFile(file, data, encoding)
}

function outputFileSync (file, ...args) {
  const dir = path.dirname(file);
  if (!fs.existsSync(dir)) {
    mkdir.mkdirsSync(dir);
  }

  fs.writeFileSync(file, ...args);
}

var outputFile_1 = {
  outputFile: u(outputFile),
  outputFileSync
};

export { outputFile_1 as o };
