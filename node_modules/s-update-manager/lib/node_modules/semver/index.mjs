import { getDefaultExportFromCjs } from '../../_virtual/_commonjsHelpers.mjs';
import { r as reExports } from './internal/re.mjs';
import { c as constants$1 } from './internal/constants.mjs';
import { s as semver$2 } from './classes/semver.mjs';
import { i as identifiers$1 } from './internal/identifiers.mjs';
import { p as parse_1 } from './functions/parse.mjs';
import { v as valid_1 } from './functions/valid.mjs';
import { c as clean_1 } from './functions/clean.mjs';
import { i as inc_1 } from './functions/inc.mjs';
import { d as diff_1 } from './functions/diff.mjs';
import { m as major_1 } from './functions/major.mjs';
import { m as minor_1 } from './functions/minor.mjs';
import { p as patch_1 } from './functions/patch.mjs';
import { p as prerelease_1 } from './functions/prerelease.mjs';
import { c as compare_1 } from './functions/compare.mjs';
import { r as rcompare_1 } from './functions/rcompare.mjs';
import { c as compareLoose_1 } from './functions/compare-loose.mjs';
import { c as compareBuild_1 } from './functions/compare-build.mjs';
import { s as sort_1 } from './functions/sort.mjs';
import { r as rsort_1 } from './functions/rsort.mjs';
import { g as gt_1 } from './functions/gt.mjs';
import { l as lt_1 } from './functions/lt.mjs';
import { e as eq_1 } from './functions/eq.mjs';
import { n as neq_1 } from './functions/neq.mjs';
import { g as gte_1 } from './functions/gte.mjs';
import { l as lte_1 } from './functions/lte.mjs';
import { c as cmp_1 } from './functions/cmp.mjs';
import { c as coerce_1 } from './functions/coerce.mjs';
import { __require as requireComparator } from './classes/comparator.mjs';
import { __require as requireRange } from './classes/range.mjs';
import { s as satisfies_1 } from './functions/satisfies.mjs';
import { t as toComparators_1 } from './ranges/to-comparators.mjs';
import { m as maxSatisfying_1 } from './ranges/max-satisfying.mjs';
import { m as minSatisfying_1 } from './ranges/min-satisfying.mjs';
import { m as minVersion_1 } from './ranges/min-version.mjs';
import { v as valid$1 } from './ranges/valid.mjs';
import { o as outside_1 } from './ranges/outside.mjs';
import { g as gtr_1 } from './ranges/gtr.mjs';
import { l as ltr_1 } from './ranges/ltr.mjs';
import { i as intersects_1 } from './ranges/intersects.mjs';
import { s as simplify } from './ranges/simplify.mjs';
import { s as subset_1 } from './ranges/subset.mjs';

// just pre-load all the stuff that index.js lazily exports
const internalRe = reExports;
const constants = constants$1;
const SemVer = semver$2;
const identifiers = identifiers$1;
const parse = parse_1;
const valid = valid_1;
const clean = clean_1;
const inc = inc_1;
const diff = diff_1;
const major = major_1;
const minor = minor_1;
const patch = patch_1;
const prerelease = prerelease_1;
const compare = compare_1;
const rcompare = rcompare_1;
const compareLoose = compareLoose_1;
const compareBuild = compareBuild_1;
const sort = sort_1;
const rsort = rsort_1;
const gt = gt_1;
const lt = lt_1;
const eq = eq_1;
const neq = neq_1;
const gte = gte_1;
const lte = lte_1;
const cmp = cmp_1;
const coerce = coerce_1;
const Comparator = requireComparator();
const Range = requireRange();
const satisfies = satisfies_1;
const toComparators = toComparators_1;
const maxSatisfying = maxSatisfying_1;
const minSatisfying = minSatisfying_1;
const minVersion = minVersion_1;
const validRange = valid$1;
const outside = outside_1;
const gtr = gtr_1;
const ltr = ltr_1;
const intersects = intersects_1;
const simplifyRange = simplify;
const subset = subset_1;
var semver = {
  parse,
  valid,
  clean,
  inc,
  diff,
  major,
  minor,
  patch,
  prerelease,
  compare,
  rcompare,
  compareLoose,
  compareBuild,
  sort,
  rsort,
  gt,
  lt,
  eq,
  neq,
  gte,
  lte,
  cmp,
  coerce,
  Comparator,
  Range,
  satisfies,
  toComparators,
  maxSatisfying,
  minSatisfying,
  minVersion,
  validRange,
  outside,
  gtr,
  ltr,
  intersects,
  simplifyRange,
  subset,
  SemVer,
  re: internalRe.re,
  src: internalRe.src,
  tokens: internalRe.t,
  SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
  RELEASE_TYPES: constants.RELEASE_TYPES,
  compareIdentifiers: identifiers.compareIdentifiers,
  rcompareIdentifiers: identifiers.rcompareIdentifiers,
};

var semver$1 = /*@__PURE__*/getDefaultExportFromCjs(semver);

export { semver$1 as default };
