import { __exports as cookies } from '../../../_virtual/cookies.mjs';
import { c as cookie } from '../../tough-cookie/lib/cookie.mjs';

var tough = cookie;

var Cookie = tough.Cookie;
var CookieJar = tough.CookieJar;

cookies.parse = function (str) {
  if (str && str.uri) {
    str = str.uri;
  }
  if (typeof str !== 'string') {
    throw new Error('The cookie function only accepts STRING as param')
  }
  return Cookie.parse(str, {loose: true})
};

// Adapt the sometimes-Async api of tough.CookieJar to our requirements
function RequestJar (store) {
  var self = this;
  self._jar = new CookieJar(store, {looseMode: true});
}
RequestJar.prototype.setCookie = function (cookieOrStr, uri, options) {
  var self = this;
  return self._jar.setCookieSync(cookieOrStr, uri, options || {})
};
RequestJar.prototype.getCookieString = function (uri) {
  var self = this;
  return self._jar.getCookieStringSync(uri)
};
RequestJar.prototype.getCookies = function (uri) {
  var self = this;
  return self._jar.getCookiesSync(uri)
};

cookies.jar = function (store) {
  return new RequestJar(store)
};

export { cookies as default };
