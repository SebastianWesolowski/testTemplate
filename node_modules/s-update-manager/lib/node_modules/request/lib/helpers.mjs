import { __exports as helpers } from '../../../_virtual/helpers.mjs';
import { s as stringifyExports } from '../../json-stringify-safe/stringify.mjs';
import require$$0 from 'crypto';
import { s as safeBufferExports } from '../../safe-buffer/index.mjs';

var jsonSafeStringify = stringifyExports;
var crypto = require$$0;
var Buffer = safeBufferExports.Buffer;

var defer = typeof setImmediate === 'undefined'
  ? process.nextTick
  : setImmediate;

function paramsHaveRequestBody (params) {
  return (
    params.body ||
    params.requestBodyStream ||
    (params.json && typeof params.json !== 'boolean') ||
    params.multipart
  )
}

function safeStringify (obj, replacer) {
  var ret;
  try {
    ret = JSON.stringify(obj, replacer);
  } catch (e) {
    ret = jsonSafeStringify(obj, replacer);
  }
  return ret
}

function md5 (str) {
  return crypto.createHash('md5').update(str).digest('hex')
}

function isReadStream (rs) {
  return rs.readable && rs.path && rs.mode
}

function toBase64 (str) {
  return Buffer.from(str || '', 'utf8').toString('base64')
}

function copy (obj) {
  var o = {};
  Object.keys(obj).forEach(function (i) {
    o[i] = obj[i];
  });
  return o
}

function version () {
  var numbers = process.version.replace('v', '').split('.');
  return {
    major: parseInt(numbers[0], 10),
    minor: parseInt(numbers[1], 10),
    patch: parseInt(numbers[2], 10)
  }
}

helpers.paramsHaveRequestBody = paramsHaveRequestBody;
helpers.safeStringify = safeStringify;
helpers.md5 = md5;
helpers.isReadStream = isReadStream;
helpers.toBase64 = toBase64;
helpers.copy = copy;
helpers.version = version;
helpers.defer = defer;

export { helpers as default };
