#!/usr/bin/env node
import minimist from '../node_modules/minimist/index.mjs';
import { buildFromConfig } from './feature/buildFromConfig.mjs';
import { cleanUp } from './feature/cleanUp.mjs';
import { cleanUpBeforeUpdate } from './feature/cleanUpBeforeUpdate.mjs';
import { cleanUpFileTree } from './feature/cleanUpFileTree.mjs';
import { getConfig } from './feature/config/defaultConfig.mjs';
import { createCatalog } from './util/createCatalog.mjs';
import { debugFunction } from './util/debugFunction.mjs';
import { downloadConfig } from './util/downloadConfig.mjs';
import { prepareBaseSnpFileMap } from './util/prepareBaseFile.mjs';
import { prepareExtraFile } from './util/prepareExtraFile.mjs';

const update = async (args) => {
    const config = await getConfig(args);
    if (!config.snpFileMapConfig) {
        throw new Error('Config file not exists, use init script');
    }
    debugFunction(config.isDebug, '=== Start SNP UPDATE ===');
    return await createCatalog(config.temporaryFolder).then(() => {
        return { ...config };
    });
};
const args = minimist(process.argv.slice(2));
let finalConfig = {
    isDebug: false,
};
update(args)
    .then((config) => {
    finalConfig = config;
    return cleanUpBeforeUpdate(config);
})
    .then((config) => {
    finalConfig = config;
    return downloadConfig(config);
})
    .then((config) => {
    finalConfig = config;
    return cleanUpFileTree(config);
})
    .then((config) => {
    finalConfig = config;
    return prepareBaseSnpFileMap(config);
})
    .then((config) => {
    finalConfig = config;
    return prepareExtraFile(config);
})
    .then((config) => {
    finalConfig = config;
    return buildFromConfig(config);
})
    .then((config) => {
    finalConfig = config;
    return cleanUp(config);
})
    .then((config) => {
    finalConfig = config;
    return cleanUp(config);
})
    .finally(() => {
    debugFunction(finalConfig?.isDebug, { finalConfig }, '[UPDATE] final config');
    debugFunction(finalConfig?.isDebug, '=== final SNP UPDATE ===');
});

export { update };
