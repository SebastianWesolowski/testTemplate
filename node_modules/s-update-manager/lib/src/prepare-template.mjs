#!/usr/bin/env node
import minimist from '../node_modules/minimist/index.mjs';
import { getTemplateConfig } from './feature/config/defaultTemplateConfig.mjs';
import { bumpVersion } from './feature/prepareTemplate/bumpVersion.mjs';
import { prepareTemplateFile } from './feature/prepareTemplate/prepareTemplateFile.mjs';
import { scanProjectFolder } from './feature/prepareTemplate/scanProjectFolder.mjs';
import { updateTemplateConfig } from './feature/prepareTemplate/updateTemplateConfig.mjs';
import { createFile } from './util/createFile.mjs';
import { debugFunction } from './util/debugFunction.mjs';
import { isFileExists } from './util/isFileExists.mjs';

const defaultRepositoryMapFileConfig = {
    templateVersion: '1.0.0',
    fileMap: [],
};
const prepareTemplate = async (args) => {
    const config = await getTemplateConfig(args);
    debugFunction(config.isDebug, '=== Start prepare template ===', '[PrepareTemplate]');
    if (!(await isFileExists(config.repositoryMapFilePath)) || process.env.SDEBUG !== 'true') {
        await createFile({
            filePath: config.repositoryMapFilePath,
            content: JSON.stringify(defaultRepositoryMapFileConfig),
            isDebug: config.isDebug,
            options: {
                overwriteFile: true,
            },
        });
        config.bumpVersion = false;
    }
    return config;
};
const args = minimist(process.argv.slice(2));
let finalConfig = {
    isDebug: false,
};
prepareTemplate(args)
    .then((config) => {
    finalConfig = config;
    return bumpVersion(config);
})
    .then((config) => {
    finalConfig = config;
    return scanProjectFolder(config);
})
    .then(({ config, fileList }) => {
    finalConfig = config;
    return prepareTemplateFile({ config, fileList });
})
    .then(({ config, templateFileList }) => {
    finalConfig = config;
    return updateTemplateConfig({ config, templateFileList });
})
    //coś linkin się popsuly w repomap.json jest przyklad
    .finally(() => {
    debugFunction(finalConfig?.isDebug, { finalConfig }, '[PrepareTemplate] final config');
    debugFunction(finalConfig?.isDebug, '=== Final prepare template ===', '[PrepareTemplate]');
});

export { defaultRepositoryMapFileConfig, prepareTemplate };
