#!/usr/bin/env node
import minimist from '../node_modules/minimist/index.mjs';
import { buildFromConfig } from './feature/buildFromConfig.mjs';
import { cleanUp } from './feature/cleanUp.mjs';
import { getConfig } from './feature/config/defaultConfig.mjs';
import { createConfigFile } from './feature/createConfigFile.mjs';
import { debugFunction } from './util/debugFunction.mjs';
import { downloadConfig } from './util/downloadConfig.mjs';
import { isFileExists } from './util/isFileExists.mjs';
import { prepareBaseSnpFileMap } from './util/prepareBaseFile.mjs';
import { prepareExtraFile } from './util/prepareExtraFile.mjs';

const init = async (args) => {
    const config = await getConfig(args);
    if ((await isFileExists(config.snpFileMapConfig)) && (await isFileExists(config.snpConfigFile))) {
        if (process.env.SDEBUG !== 'true') {
            throw new Error('Config file exists, use build script or update');
        }
    }
    debugFunction(config.isDebug, '=== Start SNP INIT ===', '[INIT]');
    return config;
};
const args = minimist(process.argv.slice(2));
let finalConfig = {
    isDebug: false,
};
init(args)
    .then((config) => {
    finalConfig = config;
    return createConfigFile(config);
})
    .then((config) => {
    finalConfig = config;
    return downloadConfig(config);
})
    .then((config) => {
    finalConfig = config;
    return prepareBaseSnpFileMap(config);
})
    .then((config) => {
    finalConfig = config;
    return prepareExtraFile(config);
})
    .then((config) => {
    finalConfig = config;
    return buildFromConfig(config);
})
    .then((config) => {
    finalConfig = config;
    return cleanUp(config);
})
    .finally(() => {
    debugFunction(finalConfig?.isDebug, { finalConfig }, '[INIT] final config');
    debugFunction(finalConfig?.isDebug, '=== final SNP INIT ===');
});

export { init };
