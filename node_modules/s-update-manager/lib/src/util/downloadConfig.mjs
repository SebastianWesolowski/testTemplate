import { createCatalog } from './createCatalog.mjs';
import { createFile } from './createFile.mjs';
import { formatterRepositoryFileNameUrl } from './formatterRepositoryFileNameUrl.mjs';
import { isFileExists } from './isFileExists.mjs';
import { objectToBuffer } from './objectToBuffer.mjs';
import { parseJSON } from './parseJSON.mjs';
import { readFile } from './readFile.mjs';
import { wgetAsync } from './wget.mjs';

async function downloadConfig(config) {
    const snpFileMapConfig = await readFile(config.snpFileMapConfig).then(async (bufferData) => parseJSON(bufferData.toString()));
    try {
        const repositoryMapFileUrl = formatterRepositoryFileNameUrl({
            repositoryUrl: config.repositoryUrl,
            fileName: config.REPOSITORY_MAP_FILE_NAME,
        });
        if (!(await isFileExists(config.temporaryFolder))) {
            await createCatalog(config.temporaryFolder);
        }
        return await wgetAsync(repositoryMapFileUrl, config.temporaryFolder)
            .then(async (snpFileMapConfigContent) => {
            let currentConfig = {};
            const downloadContent = parseJSON(snpFileMapConfigContent);
            currentConfig = {
                ...snpFileMapConfig,
                ...downloadContent,
            };
            const combinedConfig = currentConfig;
            if (!combinedConfig.createdFileMap) {
                combinedConfig.createdFileMap = [];
            }
            if (!combinedConfig.snpFileMap) {
                combinedConfig.snpFileMap = {};
            }
            await createFile({
                filePath: config.snpFileMapConfig,
                content: objectToBuffer(combinedConfig),
                options: {
                    overwriteFile: true,
                },
            });
            return combinedConfig;
        })
            .then((combinedConfig) => {
            return { ...config, templateVersion: combinedConfig.templateVersion };
        });
    }
    catch (err) {
        console.error('Error while downloading config from github', err);
        throw err;
    }
}

export { downloadConfig };
