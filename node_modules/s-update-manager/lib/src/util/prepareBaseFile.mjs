import { formatSnp } from '../feature/formatSnp.mjs';
import { updateDetailsFileMapConfig2 } from '../feature/updateFileMapConfig.mjs';
import { createPath } from './createPath.mjs';
import { getRealFileName } from './getRealFileName.mjs';
import { parseJSON } from './parseJSON.mjs';
import { readFile } from './readFile.mjs';

async function prepareBaseSnpFileMap(config) {
    let snpFileMapConfig = await readFile(config.snpFileMapConfig).then(async (bufferData) => parseJSON(bufferData.toString()));
    try {
        if (snpFileMapConfig.snpFileMap && snpFileMapConfig.fileMap) {
            for (const SNPSuffixFileName of snpFileMapConfig.fileMap) {
                const realFileName = getRealFileName({ config, contentToCheck: [SNPSuffixFileName] })[0];
                const SNPKeySuffix = formatSnp(SNPSuffixFileName, 'key');
                if (snpFileMapConfig.snpFileMap) {
                    if (!snpFileMapConfig.snpFileMap[realFileName]) {
                        snpFileMapConfig = await updateDetailsFileMapConfig2({
                            snpFileMapConfig,
                            config,
                            operation: 'createRealFileName',
                            realFileName,
                        });
                    }
                    if (snpFileMapConfig.snpFileMap && !snpFileMapConfig.snpFileMap[realFileName]['_']) {
                        snpFileMapConfig = await updateDetailsFileMapConfig2({
                            snpFileMapConfig,
                            config,
                            operation: 'addConfigSuffixFile',
                            SNPKeySuffix: '_',
                            isCreated: false,
                            path: createPath([config.projectCatalog, realFileName]),
                            realFileName,
                            realPath: createPath([config.projectCatalog, realFileName]),
                            templateVersion: snpFileMapConfig.templateVersion,
                        });
                    }
                    snpFileMapConfig = await updateDetailsFileMapConfig2({
                        snpFileMapConfig,
                        config,
                        operation: 'addConfigSuffixFile',
                        SNPKeySuffix,
                        SNPSuffixFileName,
                        isCreated: false,
                        path: createPath([config.snpCatalog, SNPSuffixFileName]),
                        realFileName,
                        realPath: createPath([config.projectCatalog, realFileName]),
                        templateVersion: snpFileMapConfig.templateVersion,
                    });
                }
            }
        }
        return config;
    }
    catch (err) {
        console.error('Error while downloading config from github', err);
        throw err;
    }
}

export { prepareBaseSnpFileMap };
