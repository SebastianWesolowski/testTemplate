import { setArgsTemplate } from '../args/argsTemplate.mjs';
import { defaultTemplateConfig } from './const.mjs';
import { createPath } from '../../util/createPath.mjs';

const regenerateConfig = (config) => {
    const regeneratedConfig = { ...config };
    if (regeneratedConfig.projectCatalog) {
        regeneratedConfig.repositoryMapFilePath = createPath([
            regeneratedConfig.projectCatalog,
            regeneratedConfig.repositoryMapFileName,
        ]);
    }
    if (regeneratedConfig.templateCatalogName) {
        regeneratedConfig.templateCatalogPath = createPath([
            regeneratedConfig.projectCatalog,
            regeneratedConfig.templateCatalogName,
        ]);
    }
    return regeneratedConfig;
};
const updateTemplateConfig = (config, keyToUpdate) => {
    const keyName = Object.keys(keyToUpdate)[0];
    const value = keyToUpdate[keyName];
    const valueToUpdate = { [keyName]: value };
    const updatedConfig = { ...config, ...valueToUpdate };
    return regenerateConfig(updatedConfig);
};
const getTemplateConfig = async (args) => {
    let config = { ...defaultTemplateConfig };
    const argsObject = setArgsTemplate(args);
    config = updateTemplateConfig(config, {
        isDebug: argsObject.isDebug || config.isDebug,
    });
    config = updateTemplateConfig(config, {
        projectCatalog: argsObject.projectCatalog || config.projectCatalog,
    });
    return regenerateConfig(config);
};

export { getTemplateConfig };
