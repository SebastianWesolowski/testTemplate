import { createFile } from '../util/createFile.mjs';
import { createPath } from '../util/createPath.mjs';
import { isEmptyObject } from '../util/isEmptyObject.mjs';
import { parseJSON } from '../util/parseJSON.mjs';
import { readFile } from '../util/readFile.mjs';

// TODO Remove it unused
const validateSuffixes = (suffixes) => {
    const pattern = /^-.*\.md$/;
    const invalidSuffixes = [];
    suffixes.forEach((suffix) => {
        if (!pattern.test(suffix)) {
            invalidSuffixes.push(suffix);
        }
    });
    if (invalidSuffixes.length > 0) {
        console.error('Invalid suffix patterns found:');
        invalidSuffixes.forEach((suffix) => {
            console.error(`Invalid suffix pattern: ${suffix}. Suffix must start with '-' and end with '.md'.`);
        });
    }
    else {
        console.log('All suffixes are valid.');
    }
};
const getKeyFromSuffix = (suffix) => {
    const keyBase = suffix.replace(/^-/, '').replace(/\.md$/, '').replace(/\./g, '');
    return `${keyBase}File`;
};
const prepareExtraFileFromConfig = async (config) => {
    const snpFileMapConfig = await readFile(config.snpFileMapConfig).then(async (bufferData) => parseJSON(bufferData.toString()));
    const suffixes = config.availableSNPSuffix;
    validateSuffixes(suffixes);
    for (const suffix of suffixes) {
        const key = getKeyFromSuffix(suffix);
        for (const keyFileName in snpFileMapConfig.snpFileMap) {
            if (isEmptyObject(snpFileMapConfig.snpFileMap[keyFileName][key])) {
                const filePath = createPath([config.snpCatalog, `${keyFileName}${suffix}`]);
                await createFile({
                    filePath,
                    content: '',
                    isDebug: config.isDebug,
                }).then(async () => {
                    if (snpFileMapConfig.snpFileMap) ;
                });
            }
        }
    }
    return config;
};

export { prepareExtraFileFromConfig };
