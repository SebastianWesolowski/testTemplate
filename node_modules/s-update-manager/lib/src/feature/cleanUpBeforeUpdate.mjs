import { formatSnp } from './formatSnp.mjs';
import { updateDetailsFileMapConfig2 } from './updateFileMapConfig.mjs';
import { createPath } from '../util/createPath.mjs';
import { deletePath } from '../util/deletePath.mjs';
import { getRealFileName } from '../util/getRealFileName.mjs';
import { parseJSON } from '../util/parseJSON.mjs';
import { readFile } from '../util/readFile.mjs';

const cleanUpBeforeUpdate = async (config) => {
    let snpFileMapConfig = await readFile(config.snpFileMapConfig).then(async (bufferData) => parseJSON(bufferData.toString()));
    const fileToClean = [];
    try {
        if (snpFileMapConfig.snpFileMap && snpFileMapConfig.fileMap) {
            const createdFileRealName = [];
            for (const SNPSuffixFileName of snpFileMapConfig.fileMap) {
                const realName = getRealFileName({ config, contentToCheck: [SNPSuffixFileName] })[0];
                const SNPKeySuffix = formatSnp(SNPSuffixFileName, 'key');
                if (!createdFileRealName.includes([realName, SNPKeySuffix])) {
                    createdFileRealName.push([realName, SNPKeySuffix]);
                }
            }
            for (const [realName, SNPKeySuffix] of createdFileRealName) {
                fileToClean.push(snpFileMapConfig.snpFileMap[realName][SNPKeySuffix]);
                if (!fileToClean.includes(snpFileMapConfig.snpFileMap[realName]['_'])) {
                    fileToClean.push(snpFileMapConfig.snpFileMap[realName]['_']);
                }
            }
        }
        for (const snpFile of fileToClean) {
            await deletePath(createPath(snpFile.path), config.isDebug).then(async () => {
                snpFileMapConfig = await updateDetailsFileMapConfig2({
                    snpFileMapConfig,
                    config,
                    operation: 'deleteFile',
                    SNPKeySuffix: snpFile.SNPKeySuffix,
                    realFileName: snpFile.realFileName,
                });
            });
        }
        snpFileMapConfig = await updateDetailsFileMapConfig2({
            snpFileMapConfig,
            config,
            operation: 'removeFileMap',
        });
        return config;
    }
    catch (err) {
        console.error('Error while downloading config from github', err);
        throw err;
    }
};

export { cleanUpBeforeUpdate };
