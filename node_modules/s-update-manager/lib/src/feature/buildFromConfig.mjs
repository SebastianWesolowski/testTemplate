import { getRemoteContentToBuild, getContentToBuild } from './getContnetToBuild.mjs';
import { updateDetailsFileMapConfig2 } from './updateFileMapConfig.mjs';
import { createFile } from '../util/createFile.mjs';
import { createPath } from '../util/createPath.mjs';
import { parseJSON } from '../util/parseJSON.mjs';
import { readFile } from '../util/readFile.mjs';

const buildFromConfig = async (config) => {
    const snpFileMapConfig = await readFile(config.snpFileMapConfig).then(async (bufferData) => parseJSON(bufferData.toString()));
    for (const realFileName in snpFileMapConfig.snpFileMap) {
        for (const SNPKeySuffix in snpFileMapConfig.snpFileMap[realFileName]) {
            if (SNPKeySuffix === '_') {
                continue;
            }
            const currentFileObject = snpFileMapConfig.snpFileMap[realFileName][SNPKeySuffix];
            if (!currentFileObject.isCreated) {
                await createFile({
                    filePath: createPath(currentFileObject.path),
                    content: '',
                    isDebug: config.isDebug,
                }).then(async () => {
                    await updateDetailsFileMapConfig2({
                        config,
                        operation: 'createSuffixFile',
                        realFileName,
                        SNPKeySuffix: SNPKeySuffix,
                    });
                });
            }
            if (snpFileMapConfig.fileMap.includes(currentFileObject.SNPSuffixFileName)) {
                const content = await getRemoteContentToBuild({
                    config,
                    snpObject: currentFileObject,
                });
                if (content) {
                    await createFile({
                        filePath: currentFileObject.path,
                        content,
                        options: {
                            overwriteFile: true,
                        },
                    });
                }
            }
        }
        const updatedSnpFileMapConfig = await readFile(config.snpFileMapConfig).then(async (bufferData) => parseJSON(bufferData.toString()));
        const realFileObject = snpFileMapConfig.snpFileMap[realFileName]['_'];
        if (updatedSnpFileMapConfig.snpFileMap) {
            const snpSetObject = updatedSnpFileMapConfig.snpFileMap[realFileName];
            const content = await getContentToBuild(snpSetObject);
            if (content) {
                await createFile({
                    filePath: realFileObject.path,
                    content,
                    isDebug: config.isDebug,
                }).then(async () => {
                    await updateDetailsFileMapConfig2({
                        config,
                        operation: 'createSNPRealFile',
                        realFileName,
                    });
                });
            }
        }
    }
    return config;
};

export { buildFromConfig };
