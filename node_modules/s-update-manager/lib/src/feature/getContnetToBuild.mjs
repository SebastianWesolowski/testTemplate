import { formatterRepositoryFileNameUrl } from '../util/formatterRepositoryFileNameUrl.mjs';
import { readFile } from '../util/readFile.mjs';
import { wgetAsync } from '../util/wget.mjs';

const getRemoteContentToBuild = async ({ config, snpObject, }) => {
    try {
        const repositoryMapFileUrl = formatterRepositoryFileNameUrl({
            repositoryUrl: config.repositoryUrl,
            fileName: snpObject.SNPSuffixFileName,
        });
        return await wgetAsync(repositoryMapFileUrl, config.temporaryFolder).then(async (remoteContent) => {
            return remoteContent;
        });
    }
    catch (err) {
        console.error('Error while downloading config from github', err);
        throw err;
    }
};
const getContentToBuild = async (snpSetObject) => {
    const { defaultFile, customFile, extendFile } = snpSetObject;
    if (snpSetObject &&
        [defaultFile.isCreated, customFile?.isCreated, extendFile?.isCreated].some((data) => data !== false)) {
        if (customFile?.isCreated) {
            const contentCustomFile = await readFile(customFile?.path || '');
            if (contentCustomFile.length) {
                return await readFile(customFile?.path || '');
            }
        }
        //END HERE dopisać pozostale mozliwości
        if (extendFile?.isCreated) {
            const contentExtendFile = await readFile(extendFile?.path || '');
            if (contentExtendFile.length) {
                return (await readFile(defaultFile.path || '')) + '\n' + (await readFile(extendFile.path || ''));
            }
        }
        if (defaultFile.isCreated) {
            return await readFile(defaultFile.path || '');
        }
    }
    else {
        return null;
    }
};

export { getContentToBuild, getRemoteContentToBuild };
